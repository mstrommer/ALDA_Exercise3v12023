// Test definitions. Do NOT edit this file!

#include <tuple>

//#define CATCH_CONFIG_MAIN // defines main() automatically
#include "lib/catch.hpp"
#include "maze.hpp"
#include <string.h>


// =====================
// Maze Testcases
// ---------------------

TEST_CASE("Test1", "Maze")
{
    int result = 0;
    char maze[ROWS][COLS] = {
        {'#','#','#','#','#','#','#','#','#','#'},
        {'#','S','#',' ','#',' ','#',' ',' ','#'},
        {'#',' ','#',' ','#',' ','#','#',' ','#'},
        {'#',' ','#',' ','#',' ',' ',' ',' ','#'},
        {'#','#',' ',' ','#',' ','#',' ',' ','#'},
        {'#',' ','#','#','#',' ','#','#',' ','#'},
        {'#',' ',' ',' ','#',' ',' ','#',' ','#'},
        {'#','#','#',' ','#','#',' ','#',' ','#'},
        {'#',' ',' ',' ',' ',' ',' ','#','T','#'},
        {'#','#','#','#','#','#','#','#','#','#'}
    };
    char expected[ROWS][COLS] = {
        {'#','#','#','#','#','#','#','#','#','#'},
        {'#','x','#',' ','#',' ','#',' ',' ','#'},
        {'#','x','#',' ','#',' ','#','#',' ','#'},
        {'#','x','#',' ','#',' ',' ',' ',' ','#'},
        {'#','#',' ',' ','#',' ','#',' ',' ','#'},
        {'#',' ','#','#','#',' ','#','#',' ','#'},
        {'#',' ',' ',' ','#',' ',' ','#',' ','#'},
        {'#','#','#',' ','#','#',' ','#',' ','#'},
        {'#',' ',' ',' ',' ',' ',' ','#','T','#'},
        {'#','#','#','#','#','#','#','#','#','#'}
    };
    init(maze);
    printf("========= Maze Test Case 1 ==========\n");
    print();
    result = escape(1,1);
    getResult(maze);
    INFO("Testing the above maze without an exit to the labyrinth. Check if you produce the required symbols. ");
    REQUIRE(memcmp(maze, expected, sizeof(maze)) == 0);
    INFO("Test Case: return value should be 0 (no escape).");
    REQUIRE(result==0);
}

TEST_CASE("Test2", "Maze")
{
    int result = 0;
    char maze[ROWS][COLS] = {
        {'#','#','#','#','#','#','#','#','#','#'},
        {'#','S','#',' ','#',' ','#',' ',' ','#'},
        {'#',' ','#',' ','#',' ','#','#',' ','#'},
        {'#',' ','#',' ','#',' ',' ',' ',' ','#'},
        {'#',' ',' ',' ','#',' ','#',' ',' ','#'},
        {'#',' ','#','#','#',' ','#','#',' ','#'},
        {'#',' ',' ',' ','#',' ',' ','#',' ','#'},
        {'#','#','#',' ','#','#',' ','#',' ','#'},
        {'#',' ',' ',' ',' ',' ',' ','#','T','#'},
        {'#','#','#','#','#','#','#','#','#','#'}
    };
    init(maze);
    printf("========= Maze Test Case 2 ==========\n");
    print();
    result = escape(1,1);
    getResult(maze);
    INFO("Testing the above maze with an exit reachable. Check if you produce the required symbols. ");
    REQUIRE(maze[8][8]=='S');
    REQUIRE(maze[7][8]=='.');
    REQUIRE(maze[6][8]=='.');
    REQUIRE(maze[8][3]=='.');
    REQUIRE(maze[1][1]=='.');
    INFO("Test Case: return value should be 1 (escape exists).");
    REQUIRE(result==1);
}

TEST_CASE("Test3", "Maze")
{
    int result = 0;
    char maze[ROWS][COLS] = {
        {'#','#','#','#','#','#','#','#','#','#'},
        {'#','S','#',' ','#',' ','#',' ',' ','#'},
        {'#',' ','#',' ','#',' ','#','#',' ','#'},
        {'#',' ','#',' ','#',' ',' ',' ',' ','#'},
        {'#',' ',' ',' ','#',' ','#',' ',' ','#'},
        {'#',' ','#','#','#',' ','#','#',' ','#'},
        {'#',' ',' ',' ','#',' ',' ','#',' ','#'},
        {'#','#','#',' ','#','#',' ','#','#','#'},
        {'#',' ',' ',' ',' ',' ',' ','#','T','#'},
        {'#','#','#','#','#','#','#','#','#','#'}
    };
    char expected[ROWS][COLS] = {
        {'#','#','#','#','#','#','#','#','#','#'},
        {'#','x','#','x','#','x','#','x','x','#'},
        {'#','x','#','x','#','x','#','#','x','#'},
        {'#','x','#','x','#','x','x','x','x','#'},
        {'#','x','x','x','#','x','#','x','x','#'},
        {'#','x','#','#','#','x','#','#','x','#'},
        {'#','x','x','x','#','x','x','#','x','#'},
        {'#','#','#','x','#','#','x','#','#','#'},
        {'#','x','x','x','x','x','x','#','T','#'},
        {'#','#','#','#','#','#','#','#','#','#'}
    };
    init(maze);
    printf("========= Maze Test Case 3 ==========\n");
    print();
    result = escape(1,1);
    getResult(maze);
    INFO("Testing the above maze without an exit to the labyrinth. Check if you produce the required symbols. ");
    REQUIRE(memcmp(maze, expected, sizeof(maze)) == 0);
    INFO("Test Case: return value should be 0 (no escape).");
    REQUIRE(result==0);
}

TEST_CASE("Test4", "Maze")
{
    int result = 0;
    char maze[ROWS][COLS] = {
        {'#','#','#','#','#','#','#','#','#','#'},
        {'#','S','#','T','#',' ','#',' ',' ','#'},
        {'#',' ','#',' ','#',' ','#','#',' ','#'},
        {'#',' ','#',' ','#',' ',' ',' ',' ','#'},
        {'#',' ',' ',' ','#',' ','#',' ',' ','#'},
        {'#',' ','#','#','#',' ','#','#',' ','#'},
        {'#',' ',' ',' ','#',' ',' ','#',' ','#'},
        {'#','#','#',' ','#','#',' ','#',' ','#'},
        {'#',' ',' ',' ',' ',' ',' ','#',' ','#'},
        {'#','#','#','#','#','#','#','#','#','#'}
    };
    init(maze);
    printf("========= Maze Test Case 4 ==========\n");
    print();
    result = escape(1,1);
    getResult(maze);
    INFO("Testing the above maze with an exit reachable. Check if you produce the required symbols. ");
    REQUIRE(maze[1][3]=='S');
    REQUIRE(maze[2][1]=='.');
    REQUIRE(maze[1][1]=='.');
    REQUIRE(maze[3][1]=='.');
    INFO("Test Case: return value should be 1 (escape exists).");
    REQUIRE(result==1);
}
